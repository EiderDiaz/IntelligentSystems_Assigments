{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Intelligent Systems\n",
    "\n",
    "## Assignment 2. Programming Intelligent Agents\n",
    "- Eider Diaz A00828174, Campus Monterrey\n",
    "- Carlos Hinojosa A01137566, Campus Monterrey\n",
    "- Miguel Cortes AXX, Campus Monterrey\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ENVIRONMENT #\n",
    "\n",
    "Island is the grid enviroment composed of 6 rows and 6 columns plus walls surrounding the area. As it was stated in the assigment, the location of all Thing objects in the environment is described by their (r,c) coordinates, where r represents rows and c is for columns.\n",
    "\n",
    "<li><b>percept(self, agent)</b> - returns what the agent perceives</li>\n",
    "<li><b>execute_action(self, agent, action)</b> - changes the state of the environment based on what the agent does.</li>\n",
    "\n",
    "The Island extends from the Environment Class. It can be either fully or partially observable. The difference between these two is <b>what locations the agent is able to perceive through the function getLocations</b>.\n",
    "\n",
    "In the <b>fully observable environment</b>, every the agent is able to perceive every location, thus adding every Thing Object to their percepts list. On the other hand, on the <b>partially-observable environment</b>, the agent can only perceive locations in a 1 radius distance.\n",
    "\n",
    "The environment may contain 5 types of Thing Objects:\n",
    "<ul>\n",
    "    <li>Treasure 1 (T)</li>\n",
    "    <li>Treasure 2 (t)</li>\n",
    "    <li>Disposable Tool (h)</li>\n",
    "    <li>Reusable Tool (H)</li>\n",
    "    <li>Wall</li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from agents import *\n",
    "from random import *\n",
    "\n",
    "\n",
    "class Treasure1(Thing):\n",
    "    pass\n",
    "\n",
    "\n",
    "class Treasure2(Thing):\n",
    "    pass\n",
    "\n",
    "\n",
    "class DisposTool(Thing):\n",
    "    pass\n",
    "\n",
    "\n",
    "class ReuseTool(Thing):\n",
    "    pass\n",
    "\n",
    "\n",
    "class Island(Environment):\n",
    "    def __init__(self, width=7, height=7):\n",
    "        super(Island, self).__init__()\n",
    "\n",
    "        self.width = width\n",
    "        self.height = height\n",
    "\n",
    "    def percept(self, agent):\n",
    "        '''prints & return a list of things that are in our agent's location'''\n",
    "        percepts = []\n",
    "        locations = []\n",
    "        # locations = self.getLocations(agent.location)\n",
    "        # TODO: implement 'getLocations function\n",
    "        for i in range(1,7):\n",
    "            for j in range(1,7):\n",
    "                locations.append([i,j])\n",
    "\n",
    "        for location in locations:\n",
    "            things = self.list_things_at(location)\n",
    "            for thing in things:\n",
    "                percepts.append(thing)\n",
    "        print(percepts)\n",
    "        return percepts\n",
    "\n",
    "    def execute_action(self, agent, action):\n",
    "        '''changes the state of the environment based on what the agent does.'''\n",
    "        # TODO: check for walls and boundaries\n",
    "        if action == 'moveRandom':\n",
    "            direction = randint(1, 4)\n",
    "            print(\"Hunter: Moved random\")\n",
    "            if direction == 1:\n",
    "                action = 'moveRight'\n",
    "            elif direction == 2:\n",
    "                action = 'moveLeft'\n",
    "            elif direction == 3:\n",
    "                action = 'moveUp'\n",
    "            elif direction == 4:\n",
    "                action = 'moveDown'\n",
    "\n",
    "        if action == 'moveRight':\n",
    "            if agent.location[0] < 6:\n",
    "                wallswalls = self.list_things_at([agent.location[0]+1, agent.location[1]], tclass=Wall)\n",
    "                agent.moveRight()\n",
    "                agent.performance -= 1\n",
    "            else:\n",
    "                agent.performance -= 5\n",
    "        elif action == 'moveLeft':\n",
    "            if agent.location[0] > 1:\n",
    "                agent.moveLeft()\n",
    "                agent.performance -= 1\n",
    "            else:\n",
    "                agent.performance -= 5\n",
    "        elif action == 'MoveUp':\n",
    "            if agent.location[1] > 1:\n",
    "                agent.moveUp()\n",
    "                agent.performance -= 1\n",
    "            else:\n",
    "                agent.performance -= 5\n",
    "        elif action == 'moveDown':\n",
    "            if agent.location[1] < 6:\n",
    "                agent.moveDown()\n",
    "                agent.performance -= 1\n",
    "            else:\n",
    "                agent.performance -= 5\n",
    "        elif action == \"Greuse\":\n",
    "            items = self.list_things_at(agent.location, tclass=ReuseTool)\n",
    "            if len(items) != 0:\n",
    "                if agent.greuse(items[0]):  #\n",
    "                    self.delete_thing(items[0])  #\n",
    "                    agent.holding.append('H')\n",
    "        elif action == \"Gdispos\":\n",
    "            agent.gdispos()\n",
    "            items = self.list_things_at(agent.location, tclass=DisposTool)\n",
    "            if len(items) != 0:\n",
    "                if agent.gdispos(items[0]):  #\n",
    "                    self.delete_thing(items[0])  # D\n",
    "                    agent.holding.append('h')\n",
    "        elif action == \"GTreasure1\":\n",
    "            items = self.list_things_at(agent.location, tclass=Treasure1)\n",
    "            if len(items) != 0:\n",
    "                if agent.gTreasure1(items[0]):  # Grab Treasure 1\n",
    "                    # TODO: add to performance\n",
    "                    agent.performance += 20\n",
    "                    self.delete_thing(items[0])  # Delete it from the Island after.\n",
    "        elif action == \"GTreasure2\":\n",
    "            items = self.list_things_at(agent.location, tclass=Treasure2)\n",
    "            if len(items) != 0:\n",
    "                if agent.gTreasure2(items[0]):  # Grab Treasure2\n",
    "                    agent.performance += 40\n",
    "                    agent.holding.remove('h')\n",
    "                    self.delete_thing(items[0])  # Delete it from the Island after.\n",
    "        elif action == \"NoOp\":\n",
    "            pass\n",
    "\n",
    "    def is_done(self):\n",
    "        '''By default, we're done when we can't find a live agent,\n",
    "        but to prevent killing our cute dog, we will or it with when there is no more food or water'''\n",
    "        no_edibles = not any(isinstance(thing, Treasure1) or isinstance(thing, DisposTool) or isinstance(thing, ReuseTool) or isinstance(thing, Treasure2) for thing in self.things)\n",
    "        dead_agents = not any(agent.is_alive() for agent in self.agents)\n",
    "        return dead_agents or no_edibles\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# PROGRAM & AGENT #\n",
    "\n",
    "The Island can be explore by two types of agents: a simple reflex or a model-based agent. \n",
    "\n",
    "Both agents can move inside the island in four directions “MoveRight”, “MoveLeft”, “MoveUp”, and “MoveDown”. We also included the action to \"MoveRandom\", for when an agent can't decide where to move to based on their percepts. This allows a simple reflex agent in a partially observable environment to avoid getting stuck without percepts, but more on that later.\n",
    "\n",
    "The agent also has actions for grabbing Things as described on the assignment. When certain conditions are met, the agent is able to perform the actions \"greuse\", \"gdispos\", \"gTreasure1\" and \"gTreasure2\" to grab a reusable tool, a disposable tool, a type 1 treasure and a type 2 treasure, respectively.\n",
    "\n",
    "Some auxiliary methods on the program includ \"printMatrix\" to show the current state of the Island,  \"inInventory\" for the agent to check if they have the required tool to grab a treasure and \"getDirection\", for the agent to decide where to move to, based on the list of percepts. \n",
    "\n",
    "The program that controls how the agent acts upon it's environment is shown in the table below.\n",
    "\n",
    "\n",
    "\n",
    "<table>\n",
    "    <tr>\n",
    "        <td><b>Percept:</b> </td>\n",
    "        <td>Find tool (H) </td>\n",
    "        <td>Find tool (h)</td>\n",
    "        <td>Find treasure (T)</td>\n",
    "         <td>Find treasure (t)</td>\n",
    "      \n",
    "\n",
    "   </tr>\n",
    "   <tr>\n",
    "       <td><b>Action (if not agent´s location aproximate):</b> </td>\n",
    "       <td>if doesnt have already, pick it</td>\n",
    "       <td>pick it</td>\n",
    "       <td>if has tool (H), Open it</td>\n",
    "       <td>if has tool (h), Open it</td>\n",
    "       \n",
    "       \n",
    "   </tr>\n",
    "        \n",
    "</table>\n",
    "\n",
    "The program is done when it runs out of user-defined iterations or when there are no more Things on the Island, including Treasure1, Treasure2, Disposable Tool and Reusable Tool. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReflexHunter(Agent):\n",
    "\n",
    "    def moveRight(self):\n",
    "        self.location[0] += 1\n",
    "        print(\"Hunter: Moved Right to {}.\".format(self.location))\n",
    "\n",
    "    def moveLeft(self):\n",
    "        self.location[0] -= 1\n",
    "        print(\"Hunter: Moved Left to {}.\".format(self.location))\n",
    "\n",
    "    def moveUp(self):\n",
    "        self.location[1] -= 1\n",
    "        print(\"Hunter: Moved Up to {}.\".format(self.location))\n",
    "\n",
    "    def moveDown(self):\n",
    "        self.location[1] += 1\n",
    "        print(\"Hunter: Moved Down to {}.\".format(self.location))\n",
    "\n",
    "    def greuse(self, thing):\n",
    "        '''returns True upon success or False otherwise'''\n",
    "        if isinstance(thing, ReuseTool):\n",
    "            print(\"Hunter: Grabbed Reusable Tool at {}.\".format(self.location))\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "    def gdispos(self, thing = None):\n",
    "        ''' returns True upon success or False otherwise'''\n",
    "        if isinstance(thing, DisposTool):\n",
    "            print(\"Hunter: Grabbed Disposable Tool at {}.\".format(self.location))\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "    def gTreasure1(self, thing):\n",
    "        ''' returns True upon success or False otherwise'''\n",
    "        if isinstance(thing, Treasure1):\n",
    "            print(\"Hunter: Grabbed Treasure1 at {}.\".format(self.location))\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "    def gTreasure2(self, thing):\n",
    "        ''' returns True upon success or False otherwise'''\n",
    "        if isinstance(thing, Treasure2):\n",
    "            print(\"Hunter: Grabbed Treasure2 at {}.\".format(self.location))\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "\n",
    "def program(percepts):\n",
    "    '''Returns an action based on it's percepts'''\n",
    "    print(\"Agent Location: \" + str(charlie.location))\n",
    "    print(\"Agent Tools: \" + str(charlie.holding))\n",
    "    printMatrix(percepts)\n",
    "    print(\"\")\n",
    "    print(\"Agent performance: \" + str(charlie.performance))\n",
    "    actionTaken = False\n",
    "    for p in percepts:\n",
    "        # Grab actions for when agent is in same location\n",
    "        if actionTaken:\n",
    "            break\n",
    "        in_location = charlie.location == p.location\n",
    "        if isinstance(p, Treasure1) and inInventory('H'):\n",
    "            if in_location:\n",
    "                actionTaken = True\n",
    "                return 'GTreasure1'\n",
    "            else:\n",
    "                moveTo = getDirection(charlie.location, p.location)\n",
    "                actionTaken = True\n",
    "                return moveTo\n",
    "        elif isinstance(p, Treasure2) and inInventory('h'):\n",
    "            if in_location:\n",
    "                actionTaken = True\n",
    "                return 'GTreasure2'\n",
    "            else:\n",
    "                moveTo = getDirection(charlie.location, p.location)\n",
    "                actionTaken = True\n",
    "                return moveTo\n",
    "        elif isinstance(p, DisposTool):\n",
    "            if in_location:\n",
    "                actionTaken = True\n",
    "                return 'Gdispos'\n",
    "            else:\n",
    "                moveTo = getDirection(charlie.location, p.location)\n",
    "                actionTaken = True\n",
    "                return moveTo\n",
    "        elif isinstance(p, ReuseTool):\n",
    "            if in_location:\n",
    "                actionTaken = True\n",
    "                return 'Greuse'\n",
    "            else:\n",
    "                moveTo = getDirection(charlie.location, p.location)\n",
    "                actionTaken = True\n",
    "                return moveTo\n",
    "\n",
    "    if not actionTaken:\n",
    "        return 'moveRandom'\n",
    "\n",
    "def printMatrix(percepts):\n",
    "    for i in range(0, 8):\n",
    "        print(\"\")\n",
    "        for j in range(0, 8):\n",
    "            if (i == 0 and j == 0) or (i == 7 and j == 7):\n",
    "                print(\"\\\\\", end=\" \")\n",
    "\n",
    "            elif (i == 0 and j == 7) or (i == 7 and j == 0):\n",
    "                print(\"/\", end=\" \")\n",
    "\n",
    "            elif (i == 0 or i == 7):\n",
    "                print(\"\".join(str(j)), end=\" \")\n",
    "\n",
    "            elif (j == 0 or j == 7):\n",
    "                print(\"\".join(str(i)), end=\" \")\n",
    "\n",
    "            else:\n",
    "                #Check percepts, print if matches location\n",
    "                printed = False\n",
    "                for p in percepts:\n",
    "                    if p.location == [i,j]:\n",
    "                        if isinstance(p, Treasure1):\n",
    "                            printed = True\n",
    "                            print(\"T\", end=\" \")\n",
    "                        elif isinstance(p, Treasure2):\n",
    "                            printed = True\n",
    "                            print(\"t\", end=\" \")\n",
    "                        elif isinstance(p, DisposTool):\n",
    "                            printed = True\n",
    "                            print(\"h\", end=\" \")\n",
    "                        elif isinstance(p, ReuseTool):\n",
    "                            printed = True\n",
    "                            print(\"H\", end=\" \")\n",
    "\n",
    "                if not printed:\n",
    "                    print(\"-\", end=\" \")\n",
    "\n",
    "\n",
    "def inInventory(tool):\n",
    "    for hold in charlie.holding:\n",
    "        if hold == tool:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "def getDirection(origin, goal):\n",
    "    if origin[0] < goal[0]:\n",
    "        return 'moveRight'\n",
    "    elif origin[0] > goal[0]:\n",
    "        return 'moveLeft'\n",
    "    elif origin [1] > goal[1]:\n",
    "        return 'moveUp'\n",
    "    else:\n",
    "        return 'moveDown'\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<ReflexHunter>, <DisposTool>, <ReuseTool>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [1, 1]\n",
      "Agent Tools: []\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - h H - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 50\n",
      "Hunter: Moved Down to [1, 2].\n",
      "[<ReflexHunter>, <DisposTool>, <ReuseTool>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [1, 2]\n",
      "Agent Tools: []\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - h H - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 49\n",
      "Hunter: Grabbed Disposable Tool at [1, 2].\n",
      "[<ReflexHunter>, <ReuseTool>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [1, 2]\n",
      "Agent Tools: ['h']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - H - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 49\n",
      "Hunter: Moved Down to [1, 3].\n",
      "[<ReflexHunter>, <ReuseTool>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [1, 3]\n",
      "Agent Tools: ['h']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - H - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 48\n",
      "Hunter: Grabbed Reusable Tool at [1, 3].\n",
      "[<ReflexHunter>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [1, 3]\n",
      "Agent Tools: ['h', 'H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 48\n",
      "Hunter: Moved Right to [2, 3].\n",
      "[<ReflexHunter>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [2, 3]\n",
      "Agent Tools: ['h', 'H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 47\n",
      "Hunter: Moved Right to [3, 3].\n",
      "[<ReflexHunter>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [3, 3]\n",
      "Agent Tools: ['h', 'H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 46\n",
      "Hunter: Moved Down to [3, 4].\n",
      "[<ReflexHunter>, <Treasure1>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [3, 4]\n",
      "Agent Tools: ['h', 'H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - T - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 45\n",
      "Hunter: Grabbed Treasure1 at [3, 4].\n",
      "[<ReflexHunter>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [3, 4]\n",
      "Agent Tools: ['h', 'H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - - - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 65\n",
      "Hunter: Moved Right to [4, 4].\n",
      "[<ReflexHunter>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [4, 4]\n",
      "Agent Tools: ['h', 'H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - - - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 64\n",
      "Hunter: Moved Right to [5, 4].\n",
      "[<ReflexHunter>, <Treasure2>, <ReuseTool>]\n",
      "Agent Location: [5, 4]\n",
      "Agent Tools: ['h', 'H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - - - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - t - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 63\n",
      "Hunter: Grabbed Treasure2 at [5, 4].\n",
      "[<ReflexHunter>, <ReuseTool>]\n",
      "Agent Location: [5, 4]\n",
      "Agent Tools: ['H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - - - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - - - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 103\n",
      "Hunter: Moved Right to [6, 4].\n",
      "[<ReflexHunter>, <ReuseTool>]\n",
      "Agent Location: [6, 4]\n",
      "Agent Tools: ['H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - - - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - - - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 102\n",
      "Hunter: Moved Down to [6, 5].\n",
      "[<ReflexHunter>, <ReuseTool>]\n",
      "Agent Location: [6, 5]\n",
      "Agent Tools: ['H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - - - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - - - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 101\n",
      "Hunter: Moved Down to [6, 6].\n",
      "[<ReflexHunter>, <ReuseTool>]\n",
      "Agent Location: [6, 6]\n",
      "Agent Tools: ['H']\n",
      "\n",
      "\\ 1 2 3 4 5 6 / \n",
      "1 - - - - - - 1 \n",
      "2 - - - - - - 2 \n",
      "3 - - - - - - 3 \n",
      "4 - - - - - - 4 \n",
      "5 - - - - - - 5 \n",
      "6 - - - - - H 6 \n",
      "/ 1 2 3 4 5 6 \\ \n",
      "Agent performance: 100\n",
      "Hunter: Grabbed Reusable Tool at [6, 6].\n",
      "100.0\n"
     ]
    }
   ],
   "source": [
    "island = Island()\n",
    "charlie = ReflexHunter(program)\n",
    "treasure1 = Treasure1()\n",
    "treasure2 = Treasure2()\n",
    "dispos = DisposTool()\n",
    "reusable = ReuseTool()\n",
    "reusable2 = ReuseTool()\n",
    "wall = Wall()\n",
    "\n",
    "island.add_thing(charlie, [1,1])\n",
    "charlie.performance = 50\n",
    "island.add_thing(treasure1, [3,4])\n",
    "island.add_thing(reusable, [6,6])\n",
    "island.add_thing(reusable2, [1,3])\n",
    "island.add_thing(treasure2, [5,4])\n",
    "island.add_thing(dispos, [1,2])\n",
    "performance = 0\n",
    "for i in range(100):\n",
    "    island.run(50)\n",
    "    performance += charlie.performance\n",
    "print(performance/100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusions\n",
    "\n",
    "Test both agents in both environments under different circumstances (different numbers of\n",
    "things in the environment with different locations and starting with the agent in different\n",
    "locations) to visualize their behaviors, compare their performance measures, generate and\n",
    "report some conclusions. \n",
    "\n",
<<<<<<< HEAD
    "- Who behaves better, the simple reflex agent or the model based reflex agent? \n",
    "They perform fairly similar, depending on the type of the environment and the configuration of the thing in it. In the fully observable environment they perform exactly the same way, while on some configurations for the partially observable environment the model-based agent is able to perform much better.\n",
    "\n",
    "- How do different types of environments affect different types of agents? \n",
    "In a fully observable environment, both agents perform the same. Having every Thing Object in the percepts lists for every iteration makes it redundant to save an internal memory, thus making the model-based agent no different than the simple reflex.\n",
    "\n",
    "However, on the partially-observable environment, the model-based agent is able to perform much better, as every step taken allows it to get to know the island better and remember the location of desirable objects even if it has to come back later for them.\n",
    "\n",
    "The difference on the agent performance resides on what they are able to perceive. Since the simple reflex has no memory, in the partial environment it will be moving mostly at random until it stumbles upon a desirable object.\n",
    "\n",
    "- Do you think the agents are behaving rationally?\n",
    "Yes, they are making the best decision on the information that they have. Except when they face walls. If a desirable object is behind a wall, the agents will be crashing into it everytime until they run out of iterations. The rules for going past a wall were not part of the scope for this assignment.\n",
=======
    "<b> who behaves better, the simple reflex agent or the model based reflex agent? </b>\n",
    "\n",
    "To calculate the performance Simple-Reflex (SR) and Model-Based (MB) on both enviroments Fully-Observable (FO) and Partial-Observable (PO) we calculate an Average Perfomance Measure that consist on 100 runs, the results are prompted in the following table:\n",
    "\n",
    "\n",
    "<table>\n",
    "    <tr>\n",
    "        <td><b>Agent:</b> </td>\n",
    "        <td>SR-FO </td>\n",
    "        <td>SR-PO</td>\n",
    "        <td>MB-FO</td>\n",
    "         <td>MB-PO</td>\n",
    "      \n",
    "\n",
    "   </tr>\n",
    "   <tr>\n",
    "       <td><b>Agent´s Average Perfomance measure:</b> </td>\n",
    "       <td>100.0</td>\n",
    "       <td> x</td>\n",
    "       <td>y</td>\n",
    "       <td>z</td>\n",
    "       \n",
    "       \n",
    "   </tr>\n",
    "        \n",
    "</table>\n",
    "\n",
    "\n",
    "<b> How do different types of environments affect different types of agents? </b>\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<b> Do you think the agents are behaving rationally ?</b>\n",
    "\n",
    "According to the AIMA definition, A rational agent acts so as to maximize the expected value of the performance measure, given the percept sequence it has seen so far.\n",
    "Both agents programed in this notebook, acts according this definition. so they are behaving rationally.\n",
    "During the design of the conditions that govern the behaviour of our agents, we came up with some other more complex ways of act upon certain percepts, that could make our agent act event more rationally. but we decided to make it simple and understandable to others.\n",
    "\n",
    "<b> What did you have to program differently for agents to work in different environments? </b>\n",
    "\n",
    "Simplereﬂex agents respond directly to percepts, so its code dont change, what it changes are the percepts given by the enviroment, whereas model-based reﬂex agents maintain internal state to track aspects of the world that are not evident in the current percept. so in the partial observable enviroment it has to append what already has observed with the current percept in order to act correctly (Learn).\n",
    "\n",
    "\n",
>>>>>>> 5e542431be66eb8384a8e3ece244e2bd2c582caa
    "\n",
    "- What did you have to program differently for agents to work in different environments? \n",
    "The main feature we had to program to get results in different environments was the option to move random, when no action can be taken based on percepts. This way, the agent won't be stuck on the same position. \n",
    "\n",
    "\n",
    "## Run the Environments for different numbers of time steps."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
